<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.retech_proj.mapper.ProductMapper">
	
	<!-- 상품 카테고리 리스트 조회 작업 -->
	<select id="selectCategoryList" resultType="hashmap">
		SELECT pd_category
		FROM 
			product
	
	</select>
	
	
	<!-- 리테크 상품 등록하기 -->
	<insert id="insertProduct">
		INSERT INTO
			product
		VALUES (
			null								-- pd_idx
			, #{pd_price}						-- 상품 가격
			, #{pd_subject}
			, #{pd_content}
			, now()								-- 작성일 (pd_first_date)
			, null								-- 등록일 (pd_update_date)
			, 0									-- 조회수 (pd_readcount)
			, pd_idx + 1						-- re_ref
			, '판매중'							-- 상품상태(pd_status)
			, #{member_id}						-- 상품 작성자
			, #{pd_category}					-- 상품 카테고리(공통코드)
			, #{pd_image1}
			, #{pd_image2}
			, #{pd_image3}
			, #{pd_image4}
			, #{pd_image5}
		)
	</insert>
	
	
	<!-- 리테크 상품 목록 조회작업 -->
	<select id="selectProductList" resultType="com.itwillbs.retech_proj.vo.ProductVO">
		SELECT
			*
		FROM
			product
		ORDER BY
			pd_first_date DESC
	</select>
		<!-- 중고상품 목록 조회작업 -->
	<!-- 해당카테고리 조회 작업으로 뷰 생성 SECONDHAND_CATEGORY -->
	
	<!-- 리테크 상품 목록 개수 조회작업(페이징) -->
	<select id="selectProductListCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			product
	</select>
	
	
	<!--선택한 카테고리와 거래상태에 해당하는 상품리스트 가져오기  -->
	<select id="selectSelectedProductList" resultType="product">
		SELECT *
		FROM product
		WHERE
			pd_category = #{pd_category}
			and pd_status = #{pd_status}
	</select>
	
	
	<!-- 상품 목록 정렬 변경 시 변경된 정렬로 목록 조회 작업 selectChangedProductList -->
	<select id="selectChangedProductList" resultType="hashmap">
	    SELECT *
	    FROM product
	    WHERE 1 = 1
	      <!-- PC, 노트북 종류 필터링 -->
	      <if test="pd_category != ''">
	        AND pd_category LIKE CONCAT('%', #{pd_category}, '%')
	      </if>
	      <!-- 제조사 필터링 -->
	      <if test="pd_selectedManufacturer != ''">
	        AND pd_category LIKE CONCAT('%', #{pd_selectedManufacturer}, '%')
	      </if>
	      <!-- 거래 상태 필터링 -->
	      <if test="pd_selectedPdStatus != ''">
	        AND pd_status LIKE CONCAT('%', #{pd_selectedPdStatus}, '%')
	      </if>
	    ORDER BY 
	      <choose>
	        <when test="sort == '최신순'">
	          pd_first_date DESC
	        </when>
	        <when test="sort == '가격순'">
	          pd_price
	        </when>
	        <when test="sort == '인기순'">
	          pd_readcount DESC
	        </when>
	        <otherwise>
	          pd_first_date DESC
	        </otherwise>
	      </choose>
			LIMIT #{listLimit} OFFSET #{startRow}
	</select>


	<!-- 상품목록 정렬변경시 변경된정렬 목록 개수 조회작업 selectChangedSecondhandListCount -->
	<select id="selectChangedProductListCount" resultType="int">
			SELECT COUNT(*)
			FROM product
	    	WHERE 1 = 1
	    <!-- 카테고리 필터링 -->
	      <if test="pd_category != ''">
	        AND pd_category like CONCAT('%',#{pd_category},'%')
	      </if>
	      <!-- 제조사 필터링 -->
	      <if test="pd_selectedManufacturer != ''">
	        AND pd_category like CONCAT('%',#{pd_selectedManufacturer},'%')
	      </if>
	      <!-- 거래 상태 필터링 -->
	 	  <if test="pd_selectedPdStatus != ''">
	        AND pd_status like CONCAT('%',#{pd_selectedPdStatus},'%')
	      </if>
	</select>
	
	
	<!-- 상품 거래 상태 업데이트 -->
	<update id="updateProductStatus">
		UPDATE product
		SET pd_status = #{pd_status}
		WHERE pd_idx = #{pd_idx}
	</update>
	
	
	<!-- 상품 상세 정보 조회 -->
	<select id="selectProductById" parameterType="int" resultType="com.itwillbs.retech_proj.vo.ProductVO">
	    SELECT * FROM product
	    WHERE pd_idx = #{pd_idx}
	</select>
	
	
	<!-- 상품 상세페이지 - 상품상세정보 조회작업 -->	
	<select id="selectProduct" parameterType="int" resultType="com.itwillbs.retech_proj.vo.ProductVO">
		SELECT *
		FROM
			product
		WHERE
			pd_idx = #{pd_idx}
	</select>
	
	
	<!-- 중고상품 상세페이지 - 판매자 정보 조회  -->
	<!-- 필요정보 : 판매자 프로필이미지, 닉네임, 주소, 등 -->
	<!-- 판매중 상품의 개수????? 는 따로-->
	<select id="selectSellerInfo" resultType="hashmap">
		SELECT *
		FROM 
			member m
		JOIN
			product p
		ON 
			m.member_id = p.member_id
		WHERE
			p.member_id = #{member_id}
			AND pd_idx = #{pd_idx}
	</select>
	
	
	<!-- 글 상세정보 조회 - 조회수 증가 작업 -->
	<update id="updateReadCount">
		UPDATE product
		SET pd_readcount = pd_readcount + 1
		WHERE 
			pd_idx = #{pd_idx}
	</update>
	
	
	<!-- 판매자의 판매상품 총 개수 조회 -->
	<select id="selectSellerProductCount" resultType="int">
		SELECT 
			COUNT(*)
		FROM 
			product
		WHERE 
			member_id = #{member_id}
	</select>
	
	
	<!-- 판매자의 판매 물품 리스트 조회 -->
	<select id="selectSellerProductList" resultType="hashmap">
		SELECT *
		FROM 
			member m
		JOIN
			product p
		ON 
			m.member_id = p.member_id
		WHERE
			p.member_id = #{member_id}
	</select>
	<!-- 상품수정  -->
	<update id="updateProduct" >
		UPDATE product
		SET 
			pd_price = #{pd_price}
			, pd_content = #{pd_content}
				<if test="!file1.equals('')">
					, pd_image1 = #{pd_image1}
				</if>
				<if test="!file2.equals('')">
					, pd_image2 = #{pd_image2}
				</if>
				<if test="!file3.equals('')">
					, pd_image3 = #{pd_image3}
				</if>
			, pd_category = #{pd_category}
		WHERE
			pd_idx = #{pd_idx}
	</update>
	<!-- 끌어올리기 작업 시 업데이트 처리 (등록날짜)-->
	<update id="updateDate">
		UPDATE product
		SET
			pd_first_date = now()
		WHERE 
			pd_idx = #{pd_idx}
	</update>
	
</mapper>




