<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- =============================================================================== -->
	<!--
	파일 업로드를 위해 form 태그에 enctype="multipart/form-data" 속성 추가했을 경우
	스프링 컨트롤러에서 폼 파라미터 데이터를 처리하기 위해(또는 MultipartFile 타입 객체 처리 위해)
	org.springframework.web.multipart.commons.CommonsMultipartResolver 객체 설정 필수!
	(꼭 MutipartFile 타입 객체를 사용하지 않더라도 request 객체를 통한 파라미터 처리가 가능해짐)
	=> bean 태그 사용하여 객체 설정
	=> id 속성값은 "multipartResolver" 고정
	=> class 속성값은 해당 라이브러리의 클래스(CommonsMultipartResolver) 지정
	=> <beans:bean> 태그 내부에 <beans:property> 태그를 통해 업로드 파일 사이즈와 인코딩 방식 지정
	   (이 때, name 속성값은 고정된 값 사용)
	-->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일 업로드 시 최대 사이즈 Byte 단위 설정(maxUploadSize 속성) : 10MB 로 제한 -->
		<beans:property name="maxUploadSize" value="10485760" />
		<!-- 한글 등의 파일명 처리를 위한 인코딩 방식 설정(defaultEncoding 속성) -->
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>
	<!-- =============================================================================== -->
	<!-- 
	애플리케이션 내에서 사용할 데이터(속성값)들을 외부 파일에 저장 후
	스프링 내에서 접근하기 위해 해당 파일을 servlet-context.xml 내에 등록해야함
	<context:property-placeholder/>	태그 내의 location 속성에 속성값이 저장된 파일 지정
	=> src/main/resources 경로는 classpath:/ 로 대체
	=> 지정한 파일 내의 속성은 스프링 클래스 내에서 @Value 어노테이션을 사용하여 접근 가능
	-->
	<context:property-placeholder location="classpath:/config/appdata.properties"/>	
	
	<!-- =============================================================================== -->
	<context:component-scan base-package="com.itwillbs.retech_proj" />
	<!-- =============================================================================== -->
	<!-- 트랜잭션 처리에 필요한 tx:annotation-driven 태그 추가(별도의 내용 추가 불필요) -->
	<tx:annotation-driven/>
	
	
	
</beans:beans>











